#!/bin/sh
# GDriveAutoremover version 0.5 by Alexandr Porunov https://github.com/porunov/xiaomi_gdrive
# Google drive autoremover

gdrive_dir="/home/hd1/gdrive/"
total_space=0
used_space=0
sleep_time=0
log=${gdrive_dir}log/GDriveAutoremover.log
#min_free_space - 600 MB * 1048576 = 629145600 byte
min_free_space=629145600
#prefer_free_space - 1200 MB * 1048576 = 1258291200 byte
prefer_free_space=1258291200
# hours: 00 minutes: 00 seconds: 00
start_time="00:00:00"
# hours: 23 minutes: 59 seconds: 59
finish_time="23:59:59"

wait_until_proper_hours(){
  while [ 1 ] ;  do
    current_time=`date +"%H:%M:%S" | awk -F':' '{print $1 * 60 * 60 + $2 * 60 + $3}'`
    if [ ${current_time} -le ${finish_time} ] && [ ${current_time} -ge ${start_time} ]; then
      break
    else
      if [ ${current_time} -le ${start_time} ]; then
	sleep_time=`expr ${start_time} - ${current_time}`
      else
	sleep_time=`expr 86400 - ${current_time} + ${start_time}`
      fi
    fi
    sleep ${sleep_time}
  done
}

check_log_file(){
	if [ $(stat -c %s ${log}) -gt 524288 ]; then
		tail -100 ${log} > ${log}.new
		mv ${log}.new ${log}
		rm ${log}.new
	fi
}

renew_token(){
	while [ 1 ] ;  do
		wait_until_proper_hours
		${gdrive_dir}./curl --insecure -s --max-time 100 -H "Host: www.googleapis.com" -H "Content-Type: application/x-www-form-urlencoded" --request POST -o ${gdrive_dir}conf/refreshed_token --data "client_id=${client_id}&client_secret=${client_secret}&refresh_token=${refresh_token}&grant_type=refresh_token" 'https://www.googleapis.com/oauth2/v4/token' > /dev/null
		if [ -f "${gdrive_dir}conf/refreshed_token" ]; then
			if grep -q "access_token" ${gdrive_dir}conf/refreshed_token; then
				break
			else
				echo "ERROR: $(date) : Your refresh_token might has reached the limit. Please configure your google drive access again. Please use configuration scipt."
				echo "ERROR: $(date) : Check ${gdrive_dir}conf/refreshed_token for detailed information"
			fi
		else
			echo "WARNING: $(date) : Can not refresh token. Please check internet conectivity"
		fi
		check_log_file
		sleep 15
	done
	export access_token=$(cat "${gdrive_dir}conf/refreshed_token" | ${gdrive_dir}./JSON.sh -b | egrep '\["access_token"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
	if grep -q "refresh_token" ${gdrive_dir}conf/refreshed_token; then
		export refresh_token=$(cat "${gdrive_dir}conf/refreshed_token" | ${gdrive_dir}./JSON.sh -b | egrep '\["refresh_token"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
	fi
	echo "access_token='${access_token}'" > ${gdrive_dir}conf/gdrive_token.conf
	echo "refresh_token='${refresh_token}'" >> ${gdrive_dir}conf/gdrive_token.conf

	if grep -q "expires_in" ${gdrive_dir}conf/refreshed_token; then
		expiretion_time=$(cat "${gdrive_dir}conf/refreshed_token" | ${gdrive_dir}./JSON.sh -b | egrep '\["expires_in"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
		export expires_in=`expr $expiretion_time + $(date +%s)`;
		echo "expires_in=${expires_in}" >> ${gdrive_dir}conf/gdrive_token.conf
	fi
	rm ${gdrive_dir}conf/refreshed_token
}

check_token(){
	if [ ! -z ${expires_in+x} ]; then
		if [ $(date +%s) -ge ${expires_in} ]; then
			renew_token
		fi
	fi
}

read_conf_files(){
	check_log_file

	if [ -f ${gdrive_dir}conf/gdrive_token.conf ]; then
		. ${gdrive_dir}conf/gdrive_token.conf
		if [ -z ${access_token+x} ] || [ -z ${refresh_token+x} ]; then
			echo "ERROR: $(date) : Your token configuretion file has not been configured properly. Please use configuration scipt again"
			echo "ERROR: $(date) : Your token configuretion file has not access_token and refresh_token."
			exit 1
		fi
	else
		echo "ERROR: $(date) : You have to configure you access first. Please use configuration scipt"
		echo "ERROR: $(date) : Your token configuretion file has to be places in this location: ${gdrive_dir}conf/gdrive_token.conf"
		exit 1
	fi

	if [ -f ${gdrive_dir}conf/gdrive_folder.conf ]; then
		. ${gdrive_dir}conf/gdrive_folder.conf
		if [ -z ${folder_id+x} ]; then
			echo "ERROR: $(date) : Your folder configuretion file has not been configured properly. Please use configuration scipt again"
			echo "ERROR: $(date) : Your folder configuretion file has not folder_id."
			exit 1
		fi
	else
		echo "ERROR: $(date) : You have to configure you folder id first. Please use configuration scipt"
		echo "ERROR: $(date) : Your configuretion file has to be places in this location: ${gdrive_dir}conf/gdrive_folder.conf"
		exit 1
	fi

	if [ -f ${gdrive_dir}conf/gdrive.conf ]; then
		. ${gdrive_dir}conf/gdrive.conf
		if [ -z ${client_id+x} ] || [ -z ${client_secret+x} ]; then
			echo "ERROR: $(date) : Your configuretion file has not been configured properly. Please use configuration scipt again"
			echo "ERROR: $(date) : Your configuretion file has not client_id and client_secret."
			exit 1
		fi
	else
		echo "ERROR: $(date) : You have to configure you client_id and client_secret first. Please use configuration scipt"
		echo "ERROR: $(date) : Your configuretion file has to be places in this location: ${gdrive_dir}conf/gdrive.conf"
		exit 1
	fi

	if [ -f ${gdrive_dir}gdrive_folder.index ]; then
		. ${gdrive_dir}gdrive_folder.index
		if [ -z ${current_dir+x} ]; then
			current_dir=""
		fi
	else
		current_dir=""
	fi

	if [ -z ${autoremove+x} ]; then
		exit 0
	fi

	if [ "${autoremove}" = "off" ]; then
		exit 0
	fi
	echo "-----STARTING GDriveAutoremover $(date)"
}

get_space_info(){
	check_token
	while [ 1 ] ;  do
	        wait_until_proper_hours
		${gdrive_dir}./curl --insecure -s --max-time 100 -H "Host: www.googleapis.com" -H "Authorization: Bearer ${access_token}" --request GET  -o ${gdrive_dir}tmp/spaceInfo "https://www.googleapis.com/drive/v2/about?fields=quotaBytesTotal,quotaBytesUsedAggregate" > /dev/null
		if [ -f "${gdrive_dir}tmp/spaceInfo" ]; then
			total_space=$(cat "${gdrive_dir}tmp/spaceInfo" | ${gdrive_dir}./JSON.sh -b | egrep '\["quotaBytesTotal"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
			used_space=$(cat "${gdrive_dir}tmp/spaceInfo" | ${gdrive_dir}./JSON.sh -b | egrep '\["quotaBytesUsedAggregate"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
			if [ "${total_space}" = "" ] || [ "${used_space}" = "" ]; then
				response_code=$(cat "${gdrive_dir}tmp/spaceInfo" | ${gdrive_dir}./JSON.sh -b | egrep '\["error","code"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
				if [ "${response_code}" = "401" ]; then
					echo "WARNING: $(date) : Can not get quota info. Token was expired. Trying to refresh token and get quota info again"
					renew_token
				else
					echo "WARNING: $(date) : Can not get quota info. Something happen. Trying to get quota info again"
					sleep 5
				fi
			else
				rm ${gdrive_dir}tmp/spaceInfo
				break
			fi
		else
			echo "WARNING: $(date) : Can not get quota info. Please check internet conectivity"
			sleep 15
		fi
		check_log_file
	done
}

get_folder_list(){
	check_token
	while [ 1 ] ;  do
	        wait_until_proper_hours
		${gdrive_dir}./curl --insecure -s --max-time 100 -H "Host: www.googleapis.com" -H "Authorization: Bearer ${access_token}" --request GET  -o ${gdrive_dir}tmp/folderListToRemove "https://www.googleapis.com/drive/v2/files?q='${folder_id}'%20in%20parents%20and%20mimeType='application/vnd.google-apps.folder'%20and%20trashed=false&orderBy=createdDate&maxResults=${1}&fields=items(id,title)" > /dev/null
		if [ -f "${gdrive_dir}tmp/folderListToRemove" ]; then
			if ! grep -q "items" ${gdrive_dir}tmp/folderListToRemove; then
				response_code=$(cat "${gdrive_dir}tmp/folderListToRemove" | ${gdrive_dir}./JSON.sh -b | egrep '\["error","code"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
				if [ "${response_code}" = "401" ]; then
					echo "WARNING: $(date) : Can not get folders. Token was expired. Trying to refresh token and get folders again"
					renew_token
				else
					echo "WARNING: $(date) : Can not get folders. Something happen. Trying to get folders. again"
					sleep 5
				fi
			else
				cat ${gdrive_dir}tmp/folderListToRemove | ${gdrive_dir}./JSON.sh -b | egrep '\["items",[0-9]+,"id"\]' | sed 's/\[.*\][^\"]*//g' | sed 's/\"//g' >> ${gdrive_dir}/tmp/foldersIdsToRemove
				cat ${gdrive_dir}tmp/folderListToRemove | ${gdrive_dir}./JSON.sh -b | egrep '\["items",[0-9]+,"title"\]' | sed 's/\[.*\][^\"]*//g' | sed 's/\"//g' >> ${gdrive_dir}/tmp/foldersTitlesToRemove
				rm ${gdrive_dir}tmp/folderListToRemove
				break
			fi
		else
			echo "WARNING: $(date) : Can not get folders. Please check internet conectivity"
			sleep 15
		fi
		check_log_file
	done
}

remove_folder(){
	check_token
	while [ 1 ] ;  do
	        wait_until_proper_hours
		${gdrive_dir}./curl --insecure -s --max-time 100 -H "Host: www.googleapis.com" -H "Authorization: Bearer ${access_token}" --request DELETE  -o ${gdrive_dir}tmp/removedFolder "https://www.googleapis.com/drive/v2/files/${1}" > /dev/null
		if [ -f "${gdrive_dir}tmp/removedFolder" ]; then
			response_code=$(cat "${gdrive_dir}tmp/folderListToRemove" | ${gdrive_dir}./JSON.sh -b | egrep '\["error","code"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
			if [ "${response_code}" = "401" ]; then
				rm ${gdrive_dir}tmp/removedFolder
				echo "WARNING: $(date) : Can not get folders. Token was expired. Trying to refresh token and get folders again"
				renew_token
			else
				rm ${gdrive_dir}tmp/removedFolder
				break
			fi
		else
			break
		fi
		check_log_file
	done
}

start_autoremover(){
	while [ 1 ] ;  do
		get_space_info
		let_space=`expr ${total_space} - ${min_free_space}`
		if [ ${used_space} -gt ${let_space} ]; then
			let_space=`expr ${total_space} - ${prefer_free_space}`
			while [ ${used_space} -gt ${let_space} ]; do
				folders_count=$(echo ${used_space} ${let_space} | awk '{ printf "%.0f", ($1 - $2) / 251658240 + 1}')
				get_folder_list ${folders_count}
				i=0
				while read folder_title_to_remove; do
					if [ "${folder_title_to_remove}" = "${current_dir}" ]; then
						break
					fi
					i=`expr $i + 1`
					folder_id_to_remove=$(sed -n "${i}p" ${gdrive_dir}/tmp/foldersIdsToRemove)
					remove_folder ${folder_id_to_remove}
				done < ${gdrive_dir}/tmp/foldersTitlesToRemove
				rm ${gdrive_dir}/tmp/foldersIdsToRemove
				rm ${gdrive_dir}/tmp/foldersTitlesToRemove
				get_space_info
				sleep 25
			done
		fi
		sleep 1200
	done
}

start_time=`echo ${start_time} | awk -F':' '{print $1 * 60 * 60 + $2 * 60 + $3}'`
finish_time=`echo ${finish_time} | awk -F':' '{print $1 * 60 * 60 + $2 * 60 + $3}'`

read_conf_files >> ${log}
start_autoremover >> ${log} 2>&1 &
exit 0
